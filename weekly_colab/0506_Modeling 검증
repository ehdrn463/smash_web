{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"0506_Modeling 검증","provenance":[{"file_id":"16sGG4Sf9cn-MX05lTovldt91PRbmoycV","timestamp":1588754352803},{"file_id":"1q1Rxbj_huPR0GTzmoIRco4mE3i_eYlLM","timestamp":1588208549945},{"file_id":"1uuDsaOMa5vtkSpABcJ0TDPKxz8PC_b1x","timestamp":1587648255679}],"collapsed_sections":[],"toc_visible":true,"machine_shape":"hm","authorship_tag":"ABX9TyMzsKf0aJOrXULsydhu4y+/"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"ah4nMFqkGGb-","colab_type":"code","colab":{}},"source":["import pandas as pd # 데이터 전처리\n","import numpy as np # 데이터 전처리\n","import random #데이터 전처리\n","from pandas import DataFrame #데이터 전처리\n","from collections import Counter #데이터 전처리\n","\n","from tqdm import tqdm #시간 측정용\n","\n","from sklearn.feature_extraction.text import CountVectorizer # model setting\n","from sklearn.model_selection import train_test_split  # model setting\n","\n","from sklearn.naive_bayes import MultinomialNB  # model 관련\n","from sklearn.metrics import roc_auc_score  # model 성능 확인\n","from sklearn.metrics import classification_report # model 성능 확인\n","from sklearn.metrics import accuracy_score # model 성능 확인\n","\n","from sklearn.calibration import CalibratedClassifierCV\n","from sklearn.svm import LinearSVC\n","from sklearn import svm\n","\n","import re\n","from tqdm import tqdm_notebook\n","import os\n","import random\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import KFold\n","from lightgbm import LGBMClassifier\n","import lightgbm\n","import joblib"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"b__3m0NyvGCe","colab_type":"code","colab":{}},"source":["# DTM 문서 단어 행렬\n","from sklearn.feature_extraction.text import CountVectorizer\n","vector = CountVectorizer()\n","\n","# TF-IDF\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.feature_extraction.text import TfidfTransformer    \n","tfvector = TfidfTransformer(smooth_idf=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2NVnKnZ8vGFZ","colab_type":"code","colab":{}},"source":["vectorizer=TfidfVectorizer(ngram_range=(1, 3),\n","    min_df=2,       \n","    max_features=10000,\n","    sublinear_tf=True,\n","    lowercase=False,\n","    use_idf=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Lx7V7njVU-3h","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"olzxfEqdU-6H","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"i3YXP_-efFd7","colab_type":"text"},"source":["# Directory 변경\n"]},{"cell_type":"code","metadata":{"id":"pZ0HVknOAvX1","colab_type":"code","outputId":"2e75f66b-86ac-433f-b05b-615dbf2ec92b","executionInfo":{"status":"ok","timestamp":1588920956006,"user_tz":-540,"elapsed":12923,"user":{"displayName":"‍김동구[학생](정경대학 언론정보학과)","photoUrl":"","userId":"02800889453040610191"}},"colab":{"base_uri":"https://localhost:8080/","height":125}},"source":["from google.colab import drive\n","\n","drive.mount('/content/gdrive')"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"plfTVr5jCwJF","colab_type":"code","outputId":"6dc27e0e-1c51-4c83-9511-22776396d4f8","executionInfo":{"status":"ok","timestamp":1588228658646,"user_tz":-540,"elapsed":551,"user":{"displayName":"‍김동구[학생](정경대학 언론정보학과)","photoUrl":"","userId":"02800889453040610191"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[""],"execution_count":0,"outputs":[{"output_type":"stream","text":["/\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mVNCo84DzhnQ","colab_type":"code","outputId":"721e0c4d-a352-471d-d768-415582c612e8","executionInfo":{"status":"ok","timestamp":1588316824038,"user_tz":-540,"elapsed":5504,"user":{"displayName":"‍김동구[학생](정경대학 언론정보학과)","photoUrl":"","userId":"02800889453040610191"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["ls"],"execution_count":0,"outputs":[{"output_type":"stream","text":["\u001b[0m\u001b[01;34mgdrive\u001b[0m/  \u001b[01;34msample_data\u001b[0m/\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"a0sgw5MaArD-","colab_type":"code","outputId":"50a8b2a6-6d7d-4e64-ca62-b50850e9eb8b","executionInfo":{"status":"ok","timestamp":1588920959590,"user_tz":-540,"elapsed":1244,"user":{"displayName":"‍김동구[학생](정경대학 언론정보학과)","photoUrl":"","userId":"02800889453040610191"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["cd gdrive/My\\ Drive/kb_data"],"execution_count":5,"outputs":[{"output_type":"stream","text":["/content/gdrive/My Drive/kb_data\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sRtbJglpHw-p","colab_type":"code","colab":{}},"source":["prepared_train = pd.read_csv('prepared_train.csv', encoding='utf-8')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PmldWIDJNYol","colab_type":"code","colab":{}},"source":["del prepared_train['Unnamed: 0']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jhy9RkwctOOP","colab_type":"code","outputId":"469699e8-db9a-42a0-ef8a-aaa5cc764dc0","executionInfo":{"status":"ok","timestamp":1588921024039,"user_tz":-540,"elapsed":57282,"user":{"displayName":"‍김동구[학생](정경대학 언론정보학과)","photoUrl":"","userId":"02800889453040610191"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["%%time\n","vec_train = vectorizer.fit_transform(prepared_train['orgin'])"],"execution_count":8,"outputs":[{"output_type":"stream","text":["CPU times: user 42.7 s, sys: 1.37 s, total: 44.1 s\n","Wall time: 44.1 s\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1zRAraH8GMU1","colab_type":"text"},"source":["# LightGBM 모델링\n"]},{"cell_type":"code","metadata":{"id":"lbJIttvPHNxp","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yzepzWaEGQeo","colab_type":"code","colab":{}},"source":["#X_train = prepared_train.drop(['year_month', 'text', 'morph', 'orgin', 'smishing'], axis='columns')\n","X_origin = vec_train\n","Y_label = prepared_train['smishing']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"pOKP64-g0Od1","colab_type":"code","outputId":"82844b17-cd3a-4263-e28c-358a21d58ca5","executionInfo":{"status":"ok","timestamp":1588921117144,"user_tz":-540,"elapsed":676,"user":{"displayName":"‍김동구[학생](정경대학 언론정보학과)","photoUrl":"","userId":"02800889453040610191"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["# train - test 분류\n","# 인덱싱 문제로 순서대로 train / test split\n","%%time\n","X_train, X_test, Y_train, Y_test = train_test_split(X_origin,\n","                                                    Y_label,\n","                                                    test_size = 0.2,\n","                                                    shuffle = False)\n","                                                    #random_state = 1825)"],"execution_count":15,"outputs":[{"output_type":"stream","text":["CPU times: user 48.7 ms, sys: 2.92 ms, total: 51.6 ms\n","Wall time: 51.1 ms\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"d7nJrWZRt8x3","colab_type":"code","outputId":"a9247bce-ae42-4bcb-8f20-1e3fb17ac34f","executionInfo":{"status":"error","timestamp":1588909700015,"user_tz":-540,"elapsed":12119902,"user":{"displayName":"‍김동구[학생](정경대학 언론정보학과)","photoUrl":"","userId":"02800889453040610191"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["%%time\n","# 4FOLD, 3SEED ENSEMBLE\n","# 총 12개의 모델을 평균내어 예측한다\n","# classification_repory\n","result_list = list()\n","result2_list = list()\n","\n","# 30번의 랜덤시드 설정\n","for try_num in range(30):\n","    lucky_seed=[]\n","    for i in range(3):\n","        lucky_seed.append(random.randint(1,10000))\n","\n","    # enumerate: 인덱스와 값을 둘다 반복시킬 때 사용\n","    for num,rs in tqdm(enumerate(lucky_seed)):\n","\n","        kfold = KFold(n_splits=4, random_state = rs, shuffle = True)\n","\n","        # numpy.zeros((row,col))\n","        # row*col size 영행렬 생성\n","        cv=np.zeros((X_train.shape[0],2))\n","\n","        for n, (train_idx, validation_idx) in tqdm(enumerate(kfold.split(X_train))):\n","            print(train_idx, validation_idx)\n","            x_train, x_validation = X_train[train_idx], X_train[validation_idx]\n","            y_train, y_validation = Y_train.loc[train_idx], Y_train.loc[validation_idx]\n","\n","            lgbm = LGBMClassifier(n_estimators=380,\n","                        learning_rate=0.035,\n","                        max_depth=7,\n","                        min_child_samples=50,\n","                        random_state=4321)\n","            \n","            lgbm.fit(x_train, y_train, eval_set=[(x_validation, y_validation)], early_stopping_rounds= 30, verbose=100) \n","\n","            # 모델결과 저장 lib\n","            if not(os.path.isdir('lgbm_models/%s/'%(str(lucky_seed)))):\n","                os.makedirs(os.path.join('lgbm_models/%s/'%(str(lucky_seed))))\n","            joblib.dump(lgbm, 'lgbm_models/%s/%s_fold_model_%s.pkl'%(str(lucky_seed), n, rs))\n","\n","            # numpy.zeros((row,col))로 만들어주었던 영행렬: cv\n","            # data object에 X_validation 예측 값을 넣어줌\n","            # CROSS-VALIDATION , EVALUATE CV\n","            cv[validation_idx,:] = lgbm.predict_proba(x_validation)\n","            \n","\n","    # MODEL LOAD & TEST PREDICT\n","    # 12 MODELS 평균 사용\n","    models = os.listdir('lgbm_models/%s/'%(str(lucky_seed)))\n","    models_list = [x for x in models if x.endswith(\".pkl\")]\n","\n","    # 모델결과가 잘 나왔는지 check\n","    # assert: 좌항과 우항의 값이 같으면 정상 작동, 다르면 오류 발생\n","    assert len(models_list) ==12\n","\n","\n","    temp_predictions = np.zeros((X_test.shape[0],2))\n","\n","    # 12개 모델을 반복시켜서 결과산출 -> 12로 나눠서 평균값 계산\n","    for model in models_list:\n","        model = joblib.load('lgbm_models/%s/'%(str(lucky_seed))+model)\n","        predict_proba = model.predict_proba(X_test)\n","        temp_predictions += predict_proba/12\n","\n","\n","    submission = pd.DataFrame(data=np.zeros((X_test.shape[0],2)))\n","    submission.index = Y_test.index \n","    submission.index.name = 'id'\n","    submission+=temp_predictions\n","\n","    submission = submission.sort_index()\n","    submission = submission.groupby('id').mean()\n","\n","    submission['pred'] = 0\n","    for idx in submission.index:\n","        if (submission[0][idx] < submission[1][idx]):\n","            submission['pred'][idx]= 1\n","\n","    submission.to_csv('lgbm_models/submissions/%s_submission.csv'%(str(lucky_seed)), index=True)\n","\n","    result = classification_report(Y_test, submission['pred'], target_names=['normal','smishing'])\n","    print(result)\n","    result_list.append(result)\n","    print('')\n","    result2 = accuracy_score(Y_test, submission['pred'])\n","    print(result2)\n","    result2_list.append(result2)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      2      3 ... 236753 236754 236755] [     0      4     12 ... 236742 236747 236750]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00448402\n","[200]\tvalid_0's binary_logloss: 0.00120924\n","[300]\tvalid_0's binary_logloss: 0.000872717\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000811069\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:22, 82.57s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      3      4 ... 236751 236752 236755] [     1      2      5 ... 236745 236753 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00417264\n","[200]\tvalid_0's binary_logloss: 0.000925742\n","[300]\tvalid_0's binary_logloss: 0.000494862\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000406949\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:46, 83.08s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236750 236753 236754] [     7      8     17 ... 236751 236752 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.0044612\n","[200]\tvalid_0's binary_logloss: 0.00129606\n","[300]\tvalid_0's binary_logloss: 0.00100697\n","Did not meet early stopping. Best iteration is:\n","[376]\tvalid_0's binary_logloss: 0.000926418\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:10, 83.21s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     3     11     25 ... 236743 236744 236746]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00420549\n","[200]\tvalid_0's binary_logloss: 0.00105245\n","[300]\tvalid_0's binary_logloss: 0.000763908\n","Did not meet early stopping. Best iteration is:\n","[377]\tvalid_0's binary_logloss: 0.000741398\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:32, 83.01s/it]\n","1it [05:32, 332.05s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236753 236754] [     4     10     17 ... 236746 236751 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00487421\n","[200]\tvalid_0's binary_logloss: 0.00188025\n","[300]\tvalid_0's binary_logloss: 0.00171724\n","Early stopping, best iteration is:\n","[332]\tvalid_0's binary_logloss: 0.00169779\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:20, 80.65s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      4 ... 236752 236753 236755] [     1      3      5 ... 236745 236747 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00427999\n","[200]\tvalid_0's binary_logloss: 0.000950296\n","[300]\tvalid_0's binary_logloss: 0.000594716\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000510123\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:43, 81.43s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      3      4 ... 236752 236754 236755] [     0      2     13 ... 236749 236750 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00409952\n","[200]\tvalid_0's binary_logloss: 0.000749679\n","[300]\tvalid_0's binary_logloss: 0.000369086\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.00028512\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:06, 81.76s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     6     16     32 ... 236737 236744 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.004085\n","[200]\tvalid_0's binary_logloss: 0.000838561\n","[300]\tvalid_0's binary_logloss: 0.000546565\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000490704\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:28, 82.13s/it]\n","2it [11:00, 330.99s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236753 236754] [     3      7     16 ... 236747 236749 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00422034\n","[200]\tvalid_0's binary_logloss: 0.000989998\n","[300]\tvalid_0's binary_logloss: 0.000663319\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000582239\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:22, 82.78s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     6      9     12 ... 236744 236748 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00460369\n","[200]\tvalid_0's binary_logloss: 0.00140212\n","[300]\tvalid_0's binary_logloss: 0.00119862\n","Early stopping, best iteration is:\n","[319]\tvalid_0's binary_logloss: 0.00119325\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:38, 80.79s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      3      6 ... 236752 236753 236755] [     0      2      4 ... 236743 236745 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.0042577\n","[200]\tvalid_0's binary_logloss: 0.00104318\n","[300]\tvalid_0's binary_logloss: 0.000693437\n","Did not meet early stopping. Best iteration is:\n","[378]\tvalid_0's binary_logloss: 0.000632972\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:00, 81.11s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236752 236754 236755] [     1     10     11 ... 236750 236751 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00436149\n","[200]\tvalid_0's binary_logloss: 0.00110638\n","[300]\tvalid_0's binary_logloss: 0.00076736\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000706466\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:23, 80.91s/it]\n","3it [16:24, 328.08s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:76: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.97      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9962661981111355\n","[     1      2      3 ... 236753 236754 236755] [     0      8     15 ... 236747 236749 236750]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00427239\n","[200]\tvalid_0's binary_logloss: 0.000901446\n","[300]\tvalid_0's binary_logloss: 0.000507045\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000417185\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:22, 82.31s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      4 ... 236752 236753 236754] [     2      3      5 ... 236740 236751 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00482786\n","[200]\tvalid_0's binary_logloss: 0.00150914\n","[300]\tvalid_0's binary_logloss: 0.0011847\n","Did not meet early stopping. Best iteration is:\n","[376]\tvalid_0's binary_logloss: 0.00113961\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:45, 82.65s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236754 236755] [     7      9     13 ... 236727 236748 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00381733\n","[200]\tvalid_0's binary_logloss: 0.00076113\n","[300]\tvalid_0's binary_logloss: 0.000508163\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000457973\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:07, 82.34s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236751 236753 236755] [     1      4      6 ... 236746 236752 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00446355\n","[200]\tvalid_0's binary_logloss: 0.00128356\n","[300]\tvalid_0's binary_logloss: 0.00094619\n","Did not meet early stopping. Best iteration is:\n","[378]\tvalid_0's binary_logloss: 0.000885597\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:29, 82.27s/it]\n","1it [05:29, 329.10s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      3      4 ... 236753 236754 236755] [     0      2     12 ... 236745 236746 236747]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00440472\n","[200]\tvalid_0's binary_logloss: 0.00113885\n","[300]\tvalid_0's binary_logloss: 0.000841969\n","Did not meet early stopping. Best iteration is:\n","[376]\tvalid_0's binary_logloss: 0.000801128\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:22, 82.61s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236752 236754 236755] [     1      4      7 ... 236748 236751 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00433587\n","[200]\tvalid_0's binary_logloss: 0.00114607\n","[300]\tvalid_0's binary_logloss: 0.000748304\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.00063244\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:44, 82.28s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236753 236755] [     3     10     19 ... 236738 236749 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00407597\n","[200]\tvalid_0's binary_logloss: 0.000889175\n","[300]\tvalid_0's binary_logloss: 0.000550965\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000486085\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:06, 82.28s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236751 236753 236754] [     5      6     18 ... 236750 236752 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00456254\n","[200]\tvalid_0's binary_logloss: 0.00128785\n","[300]\tvalid_0's binary_logloss: 0.00101348\n","Did not meet early stopping. Best iteration is:\n","[379]\tvalid_0's binary_logloss: 0.000988982\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:28, 82.19s/it]\n","2it [10:57, 329.00s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      4 ... 236753 236754 236755] [     2      3      5 ... 236742 236744 236750]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.0043038\n","[200]\tvalid_0's binary_logloss: 0.00112913\n","[300]\tvalid_0's binary_logloss: 0.000854281\n","Did not meet early stopping. Best iteration is:\n","[354]\tvalid_0's binary_logloss: 0.000828486\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:21, 81.89s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236750 236752 236755] [     7     10     12 ... 236751 236753 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00399047\n","[200]\tvalid_0's binary_logloss: 0.000776351\n","[300]\tvalid_0's binary_logloss: 0.000493351\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000459187\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:43, 81.94s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236753 236754 236755] [     1      8     11 ... 236737 236740 236749]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.0044867\n","[200]\tvalid_0's binary_logloss: 0.00121781\n","[300]\tvalid_0's binary_logloss: 0.000850788\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000801114\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:06, 82.14s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      2      3 ... 236751 236753 236754] [     0      4      9 ... 236748 236752 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00451398\n","[200]\tvalid_0's binary_logloss: 0.0012767\n","[300]\tvalid_0's binary_logloss: 0.000922015\n","Did not meet early stopping. Best iteration is:\n","[378]\tvalid_0's binary_logloss: 0.000845677\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:29, 82.46s/it]\n","3it [16:27, 329.23s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:76: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.97      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9964182533916776\n","[     1      2      3 ... 236752 236753 236754] [     0      6     10 ... 236742 236745 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00454965\n","[200]\tvalid_0's binary_logloss: 0.0012751\n","[300]\tvalid_0's binary_logloss: 0.000933687\n","Did not meet early stopping. Best iteration is:\n","[375]\tvalid_0's binary_logloss: 0.000891292\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:22, 82.41s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     3     13     19 ... 236747 236750 236751]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00445041\n","[200]\tvalid_0's binary_logloss: 0.00113156\n","[300]\tvalid_0's binary_logloss: 0.00080506\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000737474\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:44, 82.25s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      3 ... 236751 236752 236755] [     2      4      9 ... 236749 236753 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00401669\n","[200]\tvalid_0's binary_logloss: 0.000874507\n","[300]\tvalid_0's binary_logloss: 0.000565835\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000487184\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:05, 82.02s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236753 236754 236755] [     1      5      7 ... 236743 236744 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00445281\n","[200]\tvalid_0's binary_logloss: 0.00128902\n","[300]\tvalid_0's binary_logloss: 0.000952566\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000872178\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:28, 82.21s/it]\n","1it [05:28, 328.86s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236753 236755] [     3      4      5 ... 236746 236750 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00430249\n","[200]\tvalid_0's binary_logloss: 0.00110805\n","[300]\tvalid_0's binary_logloss: 0.000893971\n","Early stopping, best iteration is:\n","[325]\tvalid_0's binary_logloss: 0.000885151\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:16, 76.70s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236752 236753 236754] [     1      6     10 ... 236749 236751 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00458996\n","[200]\tvalid_0's binary_logloss: 0.00124664\n","[300]\tvalid_0's binary_logloss: 0.000853336\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000764016\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:36, 77.71s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      3      4 ... 236753 236754 236755] [     0      2     14 ... 236738 236743 236747]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00420014\n","[200]\tvalid_0's binary_logloss: 0.000922417\n","[300]\tvalid_0's binary_logloss: 0.000635909\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000563411\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:57, 78.47s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236751 236754 236755] [     9     11     13 ... 236748 236752 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00437249\n","[200]\tvalid_0's binary_logloss: 0.00126637\n","[300]\tvalid_0's binary_logloss: 0.00096155\n","Did not meet early stopping. Best iteration is:\n","[356]\tvalid_0's binary_logloss: 0.000949659\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:18, 79.58s/it]\n","2it [10:47, 325.70s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      2      3 ... 236753 236754 236755] [     0     15     32 ... 236728 236743 236746]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00481066\n","[200]\tvalid_0's binary_logloss: 0.00166168\n","[300]\tvalid_0's binary_logloss: 0.00136339\n","Did not meet early stopping. Best iteration is:\n","[376]\tvalid_0's binary_logloss: 0.00133083\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:23, 83.44s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236750 236751 236754] [     1      8     11 ... 236752 236753 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00405898\n","[200]\tvalid_0's binary_logloss: 0.000729546\n","[300]\tvalid_0's binary_logloss: 0.000425427\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.00036704\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:47, 83.52s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236753 236755] [     5      9     10 ... 236745 236751 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00426333\n","[200]\tvalid_0's binary_logloss: 0.000986183\n","[300]\tvalid_0's binary_logloss: 0.000582957\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000502724\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:11, 83.91s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      5 ... 236753 236754 236755] [     2      3      4 ... 236741 236747 236750]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00417699\n","[200]\tvalid_0's binary_logloss: 0.00100314\n","[300]\tvalid_0's binary_logloss: 0.000712913\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000636197\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:35, 83.99s/it]\n","3it [16:23, 327.71s/it]\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.97      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9960465627059082\n","[     0      1      2 ... 236753 236754 236755] [     5      6      8 ... 236734 236740 236745]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00441889\n","[200]\tvalid_0's binary_logloss: 0.00119575\n","[300]\tvalid_0's binary_logloss: 0.000799104\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000713595\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:22, 82.32s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236750 236753 236754] [     3      4      7 ... 236751 236752 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00418458\n","[200]\tvalid_0's binary_logloss: 0.00107524\n","[300]\tvalid_0's binary_logloss: 0.000848576\n","Did not meet early stopping. Best iteration is:\n","[375]\tvalid_0's binary_logloss: 0.000811511\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:47, 83.13s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     2      3      4 ... 236753 236754 236755] [     0      1     10 ... 236743 236746 236750]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00420857\n","[200]\tvalid_0's binary_logloss: 0.00106473\n","[300]\tvalid_0's binary_logloss: 0.00069958\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.00063375\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:12, 83.83s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      3 ... 236751 236752 236755] [     2      9     15 ... 236748 236753 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00440405\n","[200]\tvalid_0's binary_logloss: 0.00127658\n","[300]\tvalid_0's binary_logloss: 0.000974462\n","Did not meet early stopping. Best iteration is:\n","[379]\tvalid_0's binary_logloss: 0.000942074\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:37, 84.41s/it]\n","1it [05:37, 337.66s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     7     10     12 ... 236742 236743 236745]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00440344\n","[200]\tvalid_0's binary_logloss: 0.00119847\n","[300]\tvalid_0's binary_logloss: 0.000790426\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000725905\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:25, 85.74s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      5      6 ... 236750 236751 236752] [     1      2      3 ... 236753 236754 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00427938\n","[200]\tvalid_0's binary_logloss: 0.00116675\n","[300]\tvalid_0's binary_logloss: 0.000848596\n","Did not meet early stopping. Best iteration is:\n","[378]\tvalid_0's binary_logloss: 0.00074493\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:51, 85.73s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     5     18     24 ... 236750 236751 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00430804\n","[200]\tvalid_0's binary_logloss: 0.00120743\n","[300]\tvalid_0's binary_logloss: 0.000962969\n","Did not meet early stopping. Best iteration is:\n","[353]\tvalid_0's binary_logloss: 0.000951038\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:17, 85.77s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      2      3 ... 236753 236754 236755] [     0      6     14 ... 236744 236748 236749]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00440989\n","[200]\tvalid_0's binary_logloss: 0.00118091\n","[300]\tvalid_0's binary_logloss: 0.000912546\n","Did not meet early stopping. Best iteration is:\n","[377]\tvalid_0's binary_logloss: 0.00087881\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:42, 85.64s/it]\n","2it [11:20, 339.13s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236754 236755] [     3      5      8 ... 236745 236748 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00460337\n","[200]\tvalid_0's binary_logloss: 0.00145435\n","[300]\tvalid_0's binary_logloss: 0.00127647\n","Early stopping, best iteration is:\n","[319]\tvalid_0's binary_logloss: 0.00127278\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:17, 77.98s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      3 ... 236751 236752 236753] [     2      4     15 ... 236746 236754 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00479182\n","[200]\tvalid_0's binary_logloss: 0.0014814\n","[300]\tvalid_0's binary_logloss: 0.00127795\n","Did not meet early stopping. Best iteration is:\n","[362]\tvalid_0's binary_logloss: 0.00125602\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:43, 80.28s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236753 236754 236755] [     1      6      7 ... 236750 236751 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00421343\n","[200]\tvalid_0's binary_logloss: 0.00108285\n","[300]\tvalid_0's binary_logloss: 0.000703204\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000616554\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:08, 81.75s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      2      3 ... 236753 236754 236755] [     0      9     11 ... 236730 236736 236739]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00439746\n","[200]\tvalid_0's binary_logloss: 0.00121553\n","[300]\tvalid_0's binary_logloss: 0.000860077\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000798678\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:34, 83.52s/it]\n","3it [16:54, 338.10s/it]\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.97      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9962661981111355\n","[     2      3      5 ... 236753 236754 236755] [     0      1      4 ... 236741 236743 236749]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.0041184\n","[200]\tvalid_0's binary_logloss: 0.00085696\n","[300]\tvalid_0's binary_logloss: 0.000498351\n","Did not meet early stopping. Best iteration is:\n","[378]\tvalid_0's binary_logloss: 0.000432731\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:25, 85.58s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      3 ... 236753 236754 236755] [     2      8     14 ... 236746 236750 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00447882\n","[200]\tvalid_0's binary_logloss: 0.00117862\n","[300]\tvalid_0's binary_logloss: 0.000853318\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000790219\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:48, 84.93s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236753 236754] [     5      6      9 ... 236747 236748 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00396851\n","[200]\tvalid_0's binary_logloss: 0.000727704\n","[300]\tvalid_0's binary_logloss: 0.000425941\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000364393\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:12, 84.49s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236750 236752 236755] [     3      7     11 ... 236751 236753 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00468991\n","[200]\tvalid_0's binary_logloss: 0.00159042\n","[300]\tvalid_0's binary_logloss: 0.00130498\n","Did not meet early stopping. Best iteration is:\n","[354]\tvalid_0's binary_logloss: 0.00127369\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:36, 84.17s/it]\n","1it [05:36, 336.69s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236751 236752 236755] [     3      9     12 ... 236748 236753 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00436755\n","[200]\tvalid_0's binary_logloss: 0.00117927\n","[300]\tvalid_0's binary_logloss: 0.000850685\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000785821\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:24, 84.27s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     4      6      7 ... 236747 236750 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00421058\n","[200]\tvalid_0's binary_logloss: 0.00096413\n","[300]\tvalid_0's binary_logloss: 0.000648871\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.00058632\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:49, 84.56s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     3      4      5 ... 236753 236754 236755] [     0      1      2 ... 236745 236749 236751]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00474378\n","[200]\tvalid_0's binary_logloss: 0.00145342\n","[300]\tvalid_0's binary_logloss: 0.000965664\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000884198\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:13, 84.28s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236753 236754] [     5     10     11 ... 236743 236744 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00414235\n","[200]\tvalid_0's binary_logloss: 0.000888379\n","[300]\tvalid_0's binary_logloss: 0.000570999\n","Did not meet early stopping. Best iteration is:\n","[379]\tvalid_0's binary_logloss: 0.000534307\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:35, 83.83s/it]\n","2it [11:12, 336.28s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     3      9     13 ... 236745 236750 236751]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00438882\n","[200]\tvalid_0's binary_logloss: 0.00128551\n","[300]\tvalid_0's binary_logloss: 0.00101529\n","Did not meet early stopping. Best iteration is:\n","[354]\tvalid_0's binary_logloss: 0.000984408\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:20, 80.26s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     2      3      4 ... 236753 236754 236755] [     0      1      7 ... 236737 236739 236743]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00400263\n","[200]\tvalid_0's binary_logloss: 0.000784022\n","[300]\tvalid_0's binary_logloss: 0.000463948\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000404073\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:39, 80.01s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      3 ... 236752 236753 236755] [     2      5      6 ... 236748 236749 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00448358\n","[200]\tvalid_0's binary_logloss: 0.00118881\n","[300]\tvalid_0's binary_logloss: 0.000882301\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000804986\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:59, 79.98s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236750 236751 236754] [     4     10     12 ... 236752 236753 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.0046164\n","[200]\tvalid_0's binary_logloss: 0.00133039\n","[300]\tvalid_0's binary_logloss: 0.000833734\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000714905\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:19, 79.84s/it]\n","3it [16:31, 330.46s/it]\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.97      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9961479328929362\n","[     1      2      3 ... 236753 236754 236755] [     0      5     11 ... 236711 236712 236719]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00471775\n","[200]\tvalid_0's binary_logloss: 0.00131618\n","[300]\tvalid_0's binary_logloss: 0.00086848\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000775013\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:21, 81.39s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236751 236753 236754] [     3      8      9 ... 236750 236752 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00438435\n","[200]\tvalid_0's binary_logloss: 0.00125159\n","[300]\tvalid_0's binary_logloss: 0.000919177\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000863391\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:42, 81.27s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      3      4 ... 236752 236754 236755] [     1      2      6 ... 236746 236751 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00430251\n","[200]\tvalid_0's binary_logloss: 0.00109459\n","[300]\tvalid_0's binary_logloss: 0.000780378\n","Did not meet early stopping. Best iteration is:\n","[378]\tvalid_0's binary_logloss: 0.000737467\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:02, 80.97s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236753 236755] [     4     16     17 ... 236740 236748 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00415822\n","[200]\tvalid_0's binary_logloss: 0.000964635\n","[300]\tvalid_0's binary_logloss: 0.000657401\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000584088\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:23, 80.86s/it]\n","1it [05:23, 323.45s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      4 ... 236751 236752 236753] [     2      3      9 ... 236750 236754 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00486995\n","[200]\tvalid_0's binary_logloss: 0.00155466\n","[300]\tvalid_0's binary_logloss: 0.00122226\n","Did not meet early stopping. Best iteration is:\n","[372]\tvalid_0's binary_logloss: 0.00118403\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:21, 81.11s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      2      3 ... 236753 236754 236755] [     0      5      6 ... 236740 236748 236749]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00391386\n","[200]\tvalid_0's binary_logloss: 0.000827102\n","[300]\tvalid_0's binary_logloss: 0.000550909\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000496727\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:40, 80.72s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236752 236754 236755] [     1      4     10 ... 236741 236745 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00414059\n","[200]\tvalid_0's binary_logloss: 0.000914344\n","[300]\tvalid_0's binary_logloss: 0.000599565\n","Did not meet early stopping. Best iteration is:\n","[377]\tvalid_0's binary_logloss: 0.000541037\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:00, 80.26s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     7      8     17 ... 236746 236751 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00442225\n","[200]\tvalid_0's binary_logloss: 0.00126388\n","[300]\tvalid_0's binary_logloss: 0.000972457\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000931514\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:19, 79.86s/it]\n","2it [10:42, 322.25s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     3      7     16 ... 236749 236750 236751]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00408977\n","[200]\tvalid_0's binary_logloss: 0.0010496\n","[300]\tvalid_0's binary_logloss: 0.000642391\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000559862\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:19, 79.81s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      3 ... 236752 236753 236754] [     2     10     11 ... 236746 236747 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00445696\n","[200]\tvalid_0's binary_logloss: 0.00116445\n","[300]\tvalid_0's binary_logloss: 0.000842456\n","Did not meet early stopping. Best iteration is:\n","[379]\tvalid_0's binary_logloss: 0.000772032\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:38, 79.51s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236750 236751 236755] [     1      8      9 ... 236752 236753 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00424896\n","[200]\tvalid_0's binary_logloss: 0.000973886\n","[300]\tvalid_0's binary_logloss: 0.00068159\n","Did not meet early stopping. Best iteration is:\n","[373]\tvalid_0's binary_logloss: 0.000644259\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:56, 79.09s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      2      3 ... 236753 236754 236755] [     0      4      5 ... 236733 236745 236748]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00459963\n","[200]\tvalid_0's binary_logloss: 0.00138225\n","[300]\tvalid_0's binary_logloss: 0.00115832\n","Did not meet early stopping. Best iteration is:\n","[370]\tvalid_0's binary_logloss: 0.00113965\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:15, 78.77s/it]\n","3it [15:57, 319.32s/it]\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.97      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9963337782358208\n","[     1      3      5 ... 236752 236753 236754] [     0      2      4 ... 236741 236744 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00431098\n","[200]\tvalid_0's binary_logloss: 0.00111863\n","[300]\tvalid_0's binary_logloss: 0.000796174\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.00072791\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:18, 78.77s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236752 236753 236755] [     1      7     14 ... 236750 236751 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00470515\n","[200]\tvalid_0's binary_logloss: 0.0015589\n","[300]\tvalid_0's binary_logloss: 0.00125299\n","Did not meet early stopping. Best iteration is:\n","[373]\tvalid_0's binary_logloss: 0.00119106\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:37, 78.82s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     3      8     10 ... 236739 236745 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00403599\n","[200]\tvalid_0's binary_logloss: 0.000918536\n","[300]\tvalid_0's binary_logloss: 0.000662671\n","Did not meet early stopping. Best iteration is:\n","[355]\tvalid_0's binary_logloss: 0.00063868\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:56, 78.81s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236754 236755] [     5     15     18 ... 236748 236749 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00412804\n","[200]\tvalid_0's binary_logloss: 0.00103478\n","[300]\tvalid_0's binary_logloss: 0.000738677\n","Did not meet early stopping. Best iteration is:\n","[376]\tvalid_0's binary_logloss: 0.000686617\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:15, 78.81s/it]\n","1it [05:15, 315.24s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      3 ... 236753 236754 236755] [     2      4      6 ... 236742 236747 236750]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00447039\n","[200]\tvalid_0's binary_logloss: 0.00110219\n","[300]\tvalid_0's binary_logloss: 0.000677709\n","Did not meet early stopping. Best iteration is:\n","[378]\tvalid_0's binary_logloss: 0.000582883\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:19, 79.84s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236753 236754] [     3      7      9 ... 236743 236744 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00407451\n","[200]\tvalid_0's binary_logloss: 0.000996225\n","[300]\tvalid_0's binary_logloss: 0.000727092\n","Did not meet early stopping. Best iteration is:\n","[356]\tvalid_0's binary_logloss: 0.000710661\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:38, 79.53s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236754 236755] [     8     12     13 ... 236749 236751 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00438765\n","[200]\tvalid_0's binary_logloss: 0.00107214\n","[300]\tvalid_0's binary_logloss: 0.000674444\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000569346\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:58, 79.59s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     2      3      4 ... 236751 236753 236755] [     0      1      5 ... 236736 236752 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00438382\n","[200]\tvalid_0's binary_logloss: 0.00120525\n","[300]\tvalid_0's binary_logloss: 0.000921558\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000860835\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:18, 79.69s/it]\n","2it [10:34, 316.30s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     8      9     11 ... 236737 236740 236749]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00462029\n","[200]\tvalid_0's binary_logloss: 0.00128574\n","[300]\tvalid_0's binary_logloss: 0.000954908\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000916242\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:21, 81.36s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      4 ... 236752 236754 236755] [     2      3      5 ... 236744 236751 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00401768\n","[200]\tvalid_0's binary_logloss: 0.000690026\n","[300]\tvalid_0's binary_logloss: 0.000348393\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000256622\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:42, 81.25s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      2      3 ... 236752 236753 236755] [     0      6     10 ... 236745 236746 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.0045534\n","[200]\tvalid_0's binary_logloss: 0.00138689\n","[300]\tvalid_0's binary_logloss: 0.00104487\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000977888\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:03, 81.24s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236751 236753 236754] [     1      4      7 ... 236750 236752 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00430173\n","[200]\tvalid_0's binary_logloss: 0.00108336\n","[300]\tvalid_0's binary_logloss: 0.00070041\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000617059\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:25, 81.32s/it]\n","3it [15:59, 319.77s/it]\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.97      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9962324080487929\n","[     1      2      3 ... 236753 236754 236755] [     0      6     10 ... 236745 236750 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00411811\n","[200]\tvalid_0's binary_logloss: 0.00106832\n","[300]\tvalid_0's binary_logloss: 0.000823127\n","Early stopping, best iteration is:\n","[336]\tvalid_0's binary_logloss: 0.00081284\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:19, 79.84s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [    14     16     23 ... 236724 236725 236748]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.0044799\n","[200]\tvalid_0's binary_logloss: 0.0012814\n","[300]\tvalid_0's binary_logloss: 0.000932609\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000852744\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:41, 80.32s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      4 ... 236750 236752 236754] [     1      3      7 ... 236751 236753 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00470238\n","[200]\tvalid_0's binary_logloss: 0.00147068\n","[300]\tvalid_0's binary_logloss: 0.00118229\n","Did not meet early stopping. Best iteration is:\n","[367]\tvalid_0's binary_logloss: 0.00114192\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:02, 80.51s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      3 ... 236752 236753 236755] [     2      4      5 ... 236747 236749 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00406962\n","[200]\tvalid_0's binary_logloss: 0.000866162\n","[300]\tvalid_0's binary_logloss: 0.00049392\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000419493\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:23, 80.78s/it]\n","1it [05:23, 323.11s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     8     12     15 ... 236747 236749 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00456605\n","[200]\tvalid_0's binary_logloss: 0.00151805\n","[300]\tvalid_0's binary_logloss: 0.00125166\n","Did not meet early stopping. Best iteration is:\n","[378]\tvalid_0's binary_logloss: 0.00118988\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:18, 78.05s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      2      3 ... 236752 236753 236755] [     0     19     20 ... 236750 236751 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00426064\n","[200]\tvalid_0's binary_logloss: 0.000916785\n","[300]\tvalid_0's binary_logloss: 0.000551368\n","Did not meet early stopping. Best iteration is:\n","[378]\tvalid_0's binary_logloss: 0.000487068\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:37, 78.61s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236753 236754] [     4      5      6 ... 236742 236745 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00410718\n","[200]\tvalid_0's binary_logloss: 0.000852592\n","[300]\tvalid_0's binary_logloss: 0.000512903\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000450278\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:55, 78.42s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      4      5 ... 236752 236754 236755] [     1      2      3 ... 236744 236748 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00428738\n","[200]\tvalid_0's binary_logloss: 0.00101028\n","[300]\tvalid_0's binary_logloss: 0.000680936\n","Did not meet early stopping. Best iteration is:\n","[379]\tvalid_0's binary_logloss: 0.000616867\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:15, 78.93s/it]\n","2it [10:38, 320.89s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     5     17     19 ... 236743 236748 236750]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.0046752\n","[200]\tvalid_0's binary_logloss: 0.0015694\n","[300]\tvalid_0's binary_logloss: 0.001407\n","Early stopping, best iteration is:\n","[320]\tvalid_0's binary_logloss: 0.00140198\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:13, 73.65s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      5 ... 236753 236754 236755] [     1      3      4 ... 236749 236751 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00414745\n","[200]\tvalid_0's binary_logloss: 0.000906979\n","[300]\tvalid_0's binary_logloss: 0.000540457\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000454667\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:32, 75.26s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      3 ... 236751 236752 236755] [     2     11     15 ... 236747 236753 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.0040227\n","[200]\tvalid_0's binary_logloss: 0.000878998\n","[300]\tvalid_0's binary_logloss: 0.000474798\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000374017\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:50, 76.15s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      2      3 ... 236752 236753 236754] [     0      7      8 ... 236736 236740 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00449658\n","[200]\tvalid_0's binary_logloss: 0.00116869\n","[300]\tvalid_0's binary_logloss: 0.00083772\n","Did not meet early stopping. Best iteration is:\n","[377]\tvalid_0's binary_logloss: 0.000773147\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:08, 77.22s/it]\n","3it [15:47, 315.91s/it]\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.97      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9962324080487929\n","[     1      2      5 ... 236749 236751 236752] [     0      3      4 ... 236753 236754 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00425122\n","[200]\tvalid_0's binary_logloss: 0.000980543\n","[300]\tvalid_0's binary_logloss: 0.000667244\n","Did not meet early stopping. Best iteration is:\n","[378]\tvalid_0's binary_logloss: 0.000612703\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:19, 79.25s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      3 ... 236753 236754 236755] [     2      5     11 ... 236734 236738 236744]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00417366\n","[200]\tvalid_0's binary_logloss: 0.000996953\n","[300]\tvalid_0's binary_logloss: 0.000733735\n","Did not meet early stopping. Best iteration is:\n","[379]\tvalid_0's binary_logloss: 0.000705894\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:37, 78.89s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236753 236754 236755] [     1      7      8 ... 236747 236751 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00482983\n","[200]\tvalid_0's binary_logloss: 0.00143539\n","[300]\tvalid_0's binary_logloss: 0.00112206\n","Early stopping, best iteration is:\n","[350]\tvalid_0's binary_logloss: 0.00109468\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:55, 78.79s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     9     13     16 ... 236737 236743 236749]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00454739\n","[200]\tvalid_0's binary_logloss: 0.00117149\n","[300]\tvalid_0's binary_logloss: 0.000804441\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000737385\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:14, 78.54s/it]\n","1it [05:14, 314.14s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     6      8     11 ... 236748 236751 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00453897\n","[200]\tvalid_0's binary_logloss: 0.00124613\n","[300]\tvalid_0's binary_logloss: 0.000896393\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.00081862\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:19, 79.31s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     9     10     17 ... 236737 236742 236746]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00427527\n","[200]\tvalid_0's binary_logloss: 0.00099993\n","[300]\tvalid_0's binary_logloss: 0.000622243\n","Did not meet early stopping. Best iteration is:\n","[379]\tvalid_0's binary_logloss: 0.000561605\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:37, 78.93s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      2      6 ... 236752 236754 236755] [     0      3      4 ... 236738 236745 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00419618\n","[200]\tvalid_0's binary_logloss: 0.000959926\n","[300]\tvalid_0's binary_logloss: 0.000675441\n","Did not meet early stopping. Best iteration is:\n","[378]\tvalid_0's binary_logloss: 0.000652166\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:56, 78.87s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      3      4 ... 236751 236752 236753] [     1      2      7 ... 236750 236754 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00440637\n","[200]\tvalid_0's binary_logloss: 0.00107993\n","[300]\tvalid_0's binary_logloss: 0.000688363\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000610357\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:14, 78.70s/it]\n","2it [10:28, 314.34s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      4 ... 236753 236754 236755] [     2      3      5 ... 236749 236750 236751]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00431844\n","[200]\tvalid_0's binary_logloss: 0.00124914\n","[300]\tvalid_0's binary_logloss: 0.000904365\n","Did not meet early stopping. Best iteration is:\n","[378]\tvalid_0's binary_logloss: 0.000840908\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:18, 78.47s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     2      3      4 ... 236753 236754 236755] [     0      1      8 ... 236744 236745 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00414301\n","[200]\tvalid_0's binary_logloss: 0.000961618\n","[300]\tvalid_0's binary_logloss: 0.000643947\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000555608\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:37, 78.66s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236754 236755] [     7     10     11 ... 236736 236737 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00461484\n","[200]\tvalid_0's binary_logloss: 0.00124832\n","[300]\tvalid_0's binary_logloss: 0.00105236\n","Early stopping, best iteration is:\n","[312]\tvalid_0's binary_logloss: 0.00104844\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:48, 76.26s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236751 236752 236753] [     4     16     21 ... 236746 236754 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00442508\n","[200]\tvalid_0's binary_logloss: 0.00115385\n","[300]\tvalid_0's binary_logloss: 0.000774883\n","Did not meet early stopping. Best iteration is:\n","[378]\tvalid_0's binary_logloss: 0.000689891\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:06, 76.65s/it]\n","3it [15:35, 311.86s/it]\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.97      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9962493030799642\n","[     1      2      3 ... 236751 236752 236755] [     0     13     16 ... 236733 236753 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00443113\n","[200]\tvalid_0's binary_logloss: 0.00124252\n","[300]\tvalid_0's binary_logloss: 0.000926559\n","Did not meet early stopping. Best iteration is:\n","[374]\tvalid_0's binary_logloss: 0.000842477\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:18, 78.62s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [    11     15     20 ... 236747 236749 236750]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00450914\n","[200]\tvalid_0's binary_logloss: 0.00125225\n","[300]\tvalid_0's binary_logloss: 0.000931289\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000880988\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:37, 78.59s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236752 236753 236754] [     1      6      7 ... 236740 236751 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00437516\n","[200]\tvalid_0's binary_logloss: 0.00117246\n","[300]\tvalid_0's binary_logloss: 0.0007362\n","Did not meet early stopping. Best iteration is:\n","[379]\tvalid_0's binary_logloss: 0.000643147\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:54, 78.27s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      6 ... 236753 236754 236755] [     2      3      4 ... 236746 236748 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00424687\n","[200]\tvalid_0's binary_logloss: 0.00113003\n","[300]\tvalid_0's binary_logloss: 0.000884835\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.00084469\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:13, 78.38s/it]\n","1it [05:13, 313.51s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      5 ... 236753 236754 236755] [     1      3      4 ... 236739 236742 236749]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00437505\n","[200]\tvalid_0's binary_logloss: 0.00107523\n","[300]\tvalid_0's binary_logloss: 0.000754975\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000678418\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:17, 77.79s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      2      3 ... 236751 236754 236755] [     0      7     12 ... 236747 236752 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00427853\n","[200]\tvalid_0's binary_logloss: 0.00111582\n","[300]\tvalid_0's binary_logloss: 0.000821818\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.00077486\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:36, 77.96s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      3 ... 236751 236752 236753] [     2      6     11 ... 236748 236754 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00448735\n","[200]\tvalid_0's binary_logloss: 0.00115898\n","[300]\tvalid_0's binary_logloss: 0.000758221\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.00067737\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:54, 78.08s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     5      8      9 ... 236744 236750 236751]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00426959\n","[200]\tvalid_0's binary_logloss: 0.00103883\n","[300]\tvalid_0's binary_logloss: 0.00069815\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000636379\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:13, 78.26s/it]\n","2it [10:26, 313.37s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236753 236754 236755] [     1      5      8 ... 236747 236748 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00443813\n","[200]\tvalid_0's binary_logloss: 0.0012893\n","[300]\tvalid_0's binary_logloss: 0.000991684\n","Did not meet early stopping. Best iteration is:\n","[378]\tvalid_0's binary_logloss: 0.000934521\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:18, 78.48s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      2      3 ... 236749 236752 236754] [     0      4      6 ... 236751 236753 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00423392\n","[200]\tvalid_0's binary_logloss: 0.0009786\n","[300]\tvalid_0's binary_logloss: 0.000659496\n","Did not meet early stopping. Best iteration is:\n","[379]\tvalid_0's binary_logloss: 0.000582811\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:36, 78.44s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     3     12     15 ... 236741 236743 236744]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00449088\n","[200]\tvalid_0's binary_logloss: 0.00129813\n","[300]\tvalid_0's binary_logloss: 0.000940101\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000873559\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:54, 78.23s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      3 ... 236752 236753 236755] [     2      7     14 ... 236740 236749 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00424316\n","[200]\tvalid_0's binary_logloss: 0.00101729\n","[300]\tvalid_0's binary_logloss: 0.000663434\n","Did not meet early stopping. Best iteration is:\n","[377]\tvalid_0's binary_logloss: 0.000602417\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:12, 78.17s/it]\n","3it [15:39, 313.09s/it]\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.97      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9962661981111355\n","[     0      1      4 ... 236752 236754 236755] [     2      3      5 ... 236747 236751 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00409326\n","[200]\tvalid_0's binary_logloss: 0.000789289\n","[300]\tvalid_0's binary_logloss: 0.000441099\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000373429\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:18, 78.45s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236750 236751 236753] [     1      9     16 ... 236752 236754 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00388299\n","[200]\tvalid_0's binary_logloss: 0.000698717\n","[300]\tvalid_0's binary_logloss: 0.000444524\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000399437\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:37, 78.62s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      2      3 ... 236753 236754 236755] [     0      8     13 ... 236745 236749 236750]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00516924\n","[200]\tvalid_0's binary_logloss: 0.00217265\n","[300]\tvalid_0's binary_logloss: 0.00164127\n","Did not meet early stopping. Best iteration is:\n","[379]\tvalid_0's binary_logloss: 0.00149633\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:56, 78.67s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     4      7     10 ... 236728 236736 236746]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00462118\n","[200]\tvalid_0's binary_logloss: 0.00155277\n","[300]\tvalid_0's binary_logloss: 0.00131573\n","Did not meet early stopping. Best iteration is:\n","[359]\tvalid_0's binary_logloss: 0.00129537\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:14, 78.72s/it]\n","1it [05:14, 314.88s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236749 236750 236755] [     6      7     15 ... 236752 236753 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00445249\n","[200]\tvalid_0's binary_logloss: 0.00112839\n","[300]\tvalid_0's binary_logloss: 0.000830058\n","Did not meet early stopping. Best iteration is:\n","[379]\tvalid_0's binary_logloss: 0.000787273\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:18, 78.32s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      2      3 ... 236753 236754 236755] [     0      4      8 ... 236741 236749 236750]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00468187\n","[200]\tvalid_0's binary_logloss: 0.00143838\n","[300]\tvalid_0's binary_logloss: 0.00108495\n","Did not meet early stopping. Best iteration is:\n","[377]\tvalid_0's binary_logloss: 0.00104589\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:37, 78.59s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236753 236754] [     3      9     10 ... 236746 236748 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00418021\n","[200]\tvalid_0's binary_logloss: 0.000991917\n","[300]\tvalid_0's binary_logloss: 0.000724753\n","Did not meet early stopping. Best iteration is:\n","[376]\tvalid_0's binary_logloss: 0.000694074\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:55, 78.54s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      3      4 ... 236753 236754 236755] [     1      2      5 ... 236729 236733 236740]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00403777\n","[200]\tvalid_0's binary_logloss: 0.000861235\n","[300]\tvalid_0's binary_logloss: 0.000457095\n","Did not meet early stopping. Best iteration is:\n","[379]\tvalid_0's binary_logloss: 0.000348449\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:15, 78.88s/it]\n","2it [10:30, 315.07s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      6 ... 236752 236753 236754] [     2      3      4 ... 236749 236751 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00462094\n","[200]\tvalid_0's binary_logloss: 0.00133316\n","[300]\tvalid_0's binary_logloss: 0.000995643\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000959393\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:18, 78.01s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236753 236754 236755] [     1      6     12 ... 236741 236750 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00405421\n","[200]\tvalid_0's binary_logloss: 0.000875608\n","[300]\tvalid_0's binary_logloss: 0.000568034\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000509274\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:38, 78.80s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236751 236752 236755] [     9     10     14 ... 236744 236753 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.0043586\n","[200]\tvalid_0's binary_logloss: 0.00107116\n","[300]\tvalid_0's binary_logloss: 0.000777801\n","Did not meet early stopping. Best iteration is:\n","[362]\tvalid_0's binary_logloss: 0.000751409\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:59, 79.35s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      2      3 ... 236753 236754 236755] [     0     17     19 ... 236718 236720 236730]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00407981\n","[200]\tvalid_0's binary_logloss: 0.000938186\n","[300]\tvalid_0's binary_logloss: 0.000610479\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000526662\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:19, 79.78s/it]\n","3it [15:49, 316.51s/it]\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.97      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9961817229552788\n","[     0      1      2 ... 236753 236754 236755] [     8     13     19 ... 236746 236748 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00420883\n","[200]\tvalid_0's binary_logloss: 0.000919686\n","[300]\tvalid_0's binary_logloss: 0.000608133\n","Did not meet early stopping. Best iteration is:\n","[379]\tvalid_0's binary_logloss: 0.00055259\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:20, 80.10s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      3      6 ... 236750 236752 236754] [     0      2      4 ... 236751 236753 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.0047256\n","[200]\tvalid_0's binary_logloss: 0.00147434\n","[300]\tvalid_0's binary_logloss: 0.00120195\n","Early stopping, best iteration is:\n","[340]\tvalid_0's binary_logloss: 0.00117691\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:38, 79.71s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      4 ... 236753 236754 236755] [     1      3      9 ... 236738 236740 236749]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00462666\n","[200]\tvalid_0's binary_logloss: 0.00140597\n","[300]\tvalid_0's binary_logloss: 0.00107682\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000986816\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:00, 80.27s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236753 236755] [     6      7     10 ... 236742 236750 236754]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.0040986\n","[200]\tvalid_0's binary_logloss: 0.00099785\n","[300]\tvalid_0's binary_logloss: 0.000703936\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000644118\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:20, 80.17s/it]\n","1it [05:20, 320.70s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236754 236755] [    12     20     22 ... 236740 236742 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00434559\n","[200]\tvalid_0's binary_logloss: 0.00123825\n","[300]\tvalid_0's binary_logloss: 0.000900056\n","Did not meet early stopping. Best iteration is:\n","[375]\tvalid_0's binary_logloss: 0.000830069\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:20, 80.34s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236753 236754 236755] [     1     11     18 ... 236747 236750 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00447625\n","[200]\tvalid_0's binary_logloss: 0.00122608\n","[300]\tvalid_0's binary_logloss: 0.000931967\n","Did not meet early stopping. Best iteration is:\n","[379]\tvalid_0's binary_logloss: 0.000892904\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:40, 80.20s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      5     10 ... 236751 236752 236753] [     0      2      3 ... 236745 236754 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00416424\n","[200]\tvalid_0's binary_logloss: 0.000904424\n","[300]\tvalid_0's binary_logloss: 0.0005178\n","Did not meet early stopping. Best iteration is:\n","[378]\tvalid_0's binary_logloss: 0.000453504\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [04:01, 80.39s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236753 236754 236755] [     5     10     13 ... 236748 236749 236751]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00433641\n","[200]\tvalid_0's binary_logloss: 0.00103883\n","[300]\tvalid_0's binary_logloss: 0.000634855\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000572934\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:21, 80.37s/it]\n","2it [10:42, 320.94s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236753 236754 236755] [     1      5      7 ... 236737 236739 236744]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.0042374\n","[200]\tvalid_0's binary_logloss: 0.000883811\n","[300]\tvalid_0's binary_logloss: 0.000435294\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000341448\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:18, 78.54s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236751 236754 236755] [     3      6     11 ... 236748 236752 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.0044208\n","[200]\tvalid_0's binary_logloss: 0.00116253\n","[300]\tvalid_0's binary_logloss: 0.000835056\n","Did not meet early stopping. Best iteration is:\n","[378]\tvalid_0's binary_logloss: 0.000764105\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:38, 78.84s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     1      3      5 ... 236753 236754 236755] [     0      2      4 ... 236731 236733 236734]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00429077\n","[200]\tvalid_0's binary_logloss: 0.00109319\n","[300]\tvalid_0's binary_logloss: 0.000781804\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000721502\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:57, 79.00s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236748 236752 236753] [     8      9     10 ... 236751 236754 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00435949\n","[200]\tvalid_0's binary_logloss: 0.00126229\n","[300]\tvalid_0's binary_logloss: 0.0010622\n","Early stopping, best iteration is:\n","[324]\tvalid_0's binary_logloss: 0.00105893\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:11, 77.75s/it]\n","3it [15:53, 317.74s/it]\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.97      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9962493030799642\n","[     1      2      3 ... 236753 236754 236755] [     0      7     13 ... 236746 236748 236752]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00427057\n","[200]\tvalid_0's binary_logloss: 0.00109325\n","[300]\tvalid_0's binary_logloss: 0.000741545\n","Did not meet early stopping. Best iteration is:\n","[380]\tvalid_0's binary_logloss: 0.000683353\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [01:19, 79.78s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      3 ... 236751 236752 236753] [     2      4      6 ... 236749 236754 236755]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00449444\n","[200]\tvalid_0's binary_logloss: 0.00130541\n","[300]\tvalid_0's binary_logloss: 0.00103434\n","Did not meet early stopping. Best iteration is:\n","[360]\tvalid_0's binary_logloss: 0.00102034\n"],"name":"stdout"},{"output_type":"stream","text":["\n","2it [02:38, 79.57s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      2      3 ... 236753 236754 236755] [     1      5     11 ... 236736 236750 236751]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00429796\n","[200]\tvalid_0's binary_logloss: 0.00119975\n","[300]\tvalid_0's binary_logloss: 0.000915628\n","Did not meet early stopping. Best iteration is:\n","[374]\tvalid_0's binary_logloss: 0.000874244\n"],"name":"stdout"},{"output_type":"stream","text":["\n","3it [03:57, 79.39s/it]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236754 236755] [     3      9     10 ... 236743 236747 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00434282\n","[200]\tvalid_0's binary_logloss: 0.000926113\n","[300]\tvalid_0's binary_logloss: 0.000528149\n","Did not meet early stopping. Best iteration is:\n","[379]\tvalid_0's binary_logloss: 0.000425334\n"],"name":"stdout"},{"output_type":"stream","text":["\n","4it [05:15, 78.99s/it]\n","1it [05:15, 315.97s/it]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["[     0      1      2 ... 236752 236754 236755] [     4     13     15 ... 236745 236749 236753]\n","Training until validation scores don't improve for 30 rounds.\n","[100]\tvalid_0's binary_logloss: 0.00388916\n","[200]\tvalid_0's binary_logloss: 0.000646463\n","[300]\tvalid_0's binary_logloss: 0.000365569\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-8eb61330e58d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_cell_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'time'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'# 4FOLD, 3SEED ENSEMBLE\\n# 총 12개의 모델을 평균내어 예측한다\\n# classification_repory\\nresult_list = list()\\nresult2_list = list()\\n\\n# 30번의 랜덤시드 설정\\nfor try_num in range(30):\\n    lucky_seed=[]\\n    for i in range(3):\\n        lucky_seed.append(random.randint(1,10000))\\n\\n    # enumerate: 인덱스와 값을 둘다 반복시킬 때 사용\\n    for num,rs in tqdm(enumerate(lucky_seed)):\\n\\n        kfold = KFold(n_splits=4, random_state = rs, shuffle = True)\\n\\n        # numpy.zeros((row,col))\\n        # row*col size 영행렬 생성\\n        cv=np.zeros((X_train.shape[0],2))\\n\\n        for n, (train_idx, validation_idx) in tqdm(enumerate(kfold.split(X_train))):\\n            print(train_idx, validation_idx)\\n            x_train, x_validation = X_train[train_idx], X_train[validation_idx]\\n            y_train, y_validation = Y_train.loc[train_idx], Y_train.loc[validation_idx]\\n\\n            lgbm = LGBMClassifier(n_estimators=380,\\n                        learning_rate=0.035,\\n                        max_depth=7,\\n                        min_child_samples=50,\\n                        random_state=4321)\\n            \\n            lgbm.fit(x_train, y_train, eval_set=[(x_validation, y_validation)], early_stopping_rounds= 30, verbose=100) \\n\\n            # 모델결과 저장 lib\\n            if not(os.path.isdir(\\'lgbm_models/%s/\\'%(str(lucky_seed)))):\\n                os...\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mrun_cell_magic\u001b[0;34m(self, magic_name, line, cell)\u001b[0m\n\u001b[1;32m   2115\u001b[0m             \u001b[0mmagic_arg_s\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvar_expand\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstack_depth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2116\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuiltin_trap\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2117\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmagic_arg_s\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcell\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2118\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2119\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<decorator-gen-60>\u001b[0m in \u001b[0;36mtime\u001b[0;34m(self, line, cell, local_ns)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/IPython/core/magic.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(f, *a, **k)\u001b[0m\n\u001b[1;32m    186\u001b[0m     \u001b[0;31m# but it's overkill for just that one bit of state.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mmagic_deco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 188\u001b[0;31m         \u001b[0mcall\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    189\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/IPython/core/magics/execution.py\u001b[0m in \u001b[0;36mtime\u001b[0;34m(self, line, cell, local_ns)\u001b[0m\n\u001b[1;32m   1191\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1192\u001b[0m             \u001b[0mst\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclock2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1193\u001b[0;31m             \u001b[0mexec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mglob\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlocal_ns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1194\u001b[0m             \u001b[0mend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclock2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1195\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<timed exec>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/lightgbm/sklearn.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, init_score, eval_set, eval_names, eval_sample_weight, eval_class_weight, eval_init_score, eval_metric, early_stopping_rounds, verbose, feature_name, categorical_feature, callbacks)\u001b[0m\n\u001b[1;32m    742\u001b[0m                                         \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeature_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfeature_name\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    743\u001b[0m                                         \u001b[0mcategorical_feature\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcategorical_feature\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 744\u001b[0;31m                                         callbacks=callbacks)\n\u001b[0m\u001b[1;32m    745\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    746\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/lightgbm/sklearn.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, init_score, group, eval_set, eval_names, eval_sample_weight, eval_class_weight, eval_init_score, eval_group, eval_metric, early_stopping_rounds, verbose, feature_name, categorical_feature, callbacks)\u001b[0m\n\u001b[1;32m    542\u001b[0m                               \u001b[0mverbose_eval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeature_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfeature_name\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    543\u001b[0m                               \u001b[0mcategorical_feature\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcategorical_feature\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 544\u001b[0;31m                               callbacks=callbacks)\n\u001b[0m\u001b[1;32m    545\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    546\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mevals_result\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/lightgbm/engine.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(params, train_set, num_boost_round, valid_sets, valid_names, fobj, feval, init_model, feature_name, categorical_feature, early_stopping_rounds, evals_result, verbose_eval, learning_rates, keep_training_booster, callbacks)\u001b[0m\n\u001b[1;32m    216\u001b[0m                                     evaluation_result_list=None))\n\u001b[1;32m    217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 218\u001b[0;31m         \u001b[0mbooster\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfobj\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    219\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    220\u001b[0m         \u001b[0mevaluation_result_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/lightgbm/basic.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, train_set, fobj)\u001b[0m\n\u001b[1;32m   1800\u001b[0m             _safe_call(_LIB.LGBM_BoosterUpdateOneIter(\n\u001b[1;32m   1801\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1802\u001b[0;31m                 ctypes.byref(is_finished)))\n\u001b[0m\u001b[1;32m   1803\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__is_predicted_cur_iter\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;32mFalse\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__num_dataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1804\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mis_finished\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"FZQs8zNdaljH","colab_type":"text"},"source":["# Support Vector Machine 모델링"]},{"cell_type":"code","metadata":{"id":"OQmcm8UFEJBw","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"iJQHMJblIU2C","colab_type":"code","outputId":"90883974-22f2-41b7-eb03-b5c8cb8dd8d6","executionInfo":{"status":"ok","timestamp":1588847276720,"user_tz":-540,"elapsed":1708630,"user":{"displayName":"‍김동구[학생](정경대학 언론정보학과)","photoUrl":"","userId":"02800889453040610191"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["%%time\n","# 4FOLD, 3SEED ENSEMBLE\n","# 총 12개의 모델을 평균내어 예측한다\n","# classification_repory\n","result_list = list()\n","result2_list = list()\n","\n","# 30번의 랜덤시드 설정\n","for try_num in range(30):\n","    lucky_seed=[]\n","    for i in range(3):\n","        lucky_seed.append(random.randint(1,10000))\n","\n","    # enumerate: 인덱스와 값을 둘다 반복시킬 때 사용\n","    for num,rs in tqdm(enumerate(lucky_seed)):\n","\n","        kfold = KFold(n_splits=4, random_state = rs, shuffle = True)\n","\n","        # numpy.zeros((row,col))\n","        # row*col size 영행렬 생성\n","        cv=np.zeros((X_train.shape[0],2))\n","\n","        for n, (train_idx, validation_idx) in tqdm(enumerate(kfold.split(X_train))):\n","            x_train, x_validation = X_train[train_idx], X_train[validation_idx]\n","            y_train, y_validation = Y_train.loc[train_idx], Y_train.loc[validation_idx]\n","\n","            model_svc = LinearSVC(class_weight='balanced',\n","                              random_state=4321)\n","            svm_model = CalibratedClassifierCV(model_svc)\n","            svm_model.fit(x_train, y_train)  \n","\n","            # 모델결과 저장 lib\n","            if not(os.path.isdir('svm_models/%s/'%(str(lucky_seed)))):\n","                os.makedirs(os.path.join('svm_models/%s/'%(str(lucky_seed))))\n","            joblib.dump(svm_model, 'svm_models/%s/%s_fold_model_%s.pkl'%(str(lucky_seed), n, rs))\n","\n","            # numpy.zeros((row,col))로 만들어주었던 영행렬: cv\n","            # data object에 X_validation 예측 값을 넣어줌\n","            # CROSS-VALIDATION , EVALUATE CV\n","            cv[validation_idx,:] = svm_model.predict_proba(x_validation)\n","            \n","\n","    # MODEL LOAD & TEST PREDICT\n","    # 12 MODELS 평균 사용\n","    models = os.listdir('svm_models/%s/'%(str(lucky_seed)))\n","    models_list = [x for x in models if x.endswith(\".pkl\")]\n","\n","    # 모델결과가 잘 나왔는지 check\n","    # assert: 좌항과 우항의 값이 같으면 정상 작동, 다르면 오류 발생\n","    assert len(models_list) ==12\n","\n","\n","    temp_predictions = np.zeros((X_test.shape[0],2))\n","\n","    # 12개 모델을 반복시켜서 결과산출 -> 12로 나눠서 평균값 계산\n","    for model in models_list:\n","        model = joblib.load('svm_models/%s/'%(str(lucky_seed))+model)\n","        predict_proba = svm_model.predict_proba(X_test)\n","        temp_predictions += predict_proba/12\n","\n","\n","    submission = pd.DataFrame(data=np.zeros((X_test.shape[0],2)))\n","    submission.index = Y_test.index \n","    submission.index.name = 'id'\n","    submission+=temp_predictions\n","\n","    submission = submission.sort_index()\n","    submission = submission.groupby('id').mean()\n","\n","    submission['pred'] = 0\n","    for idx in submission.index:\n","        if (submission[0][idx] < submission[1][idx]):\n","            submission['pred'][idx]= 1\n","\n","    submission.to_csv('svm_models/submissions/%s_submission.csv'%(str(lucky_seed)), index=True)\n","\n","    result = classification_report(Y_test, submission['pred'], target_names=['normal','smishing'])\n","    print(result)\n","    result_list.append(result)\n","    print('')\n","    result2 = accuracy_score(Y_test, submission['pred'])\n","    print(result2)\n","    result2_list.append(result2)\n","\n"],"execution_count":16,"outputs":[{"output_type":"stream","text":["0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.82s/it]\u001b[A\n","2it [00:09,  4.71s/it]\u001b[A\n","3it [00:13,  4.70s/it]\u001b[A\n","4it [00:18,  4.73s/it]\n","1it [00:18, 18.93s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.85s/it]\u001b[A\n","2it [00:09,  4.76s/it]\u001b[A\n","3it [00:14,  4.73s/it]\u001b[A\n","4it [00:18,  4.74s/it]\n","2it [00:37, 18.94s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.61s/it]\u001b[A\n","2it [00:09,  4.59s/it]\u001b[A\n","3it [00:13,  4.57s/it]\u001b[A\n","4it [00:18,  4.52s/it]\n","3it [00:55, 18.66s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9972798999814154\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.47s/it]\u001b[A\n","2it [00:09,  4.51s/it]\u001b[A\n","3it [00:13,  4.46s/it]\u001b[A\n","4it [00:17,  4.47s/it]\n","1it [00:17, 17.90s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.55s/it]\u001b[A\n","2it [00:09,  4.55s/it]\u001b[A\n","3it [00:13,  4.55s/it]\u001b[A\n","4it [00:18,  4.53s/it]\n","2it [00:36, 17.97s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.94s/it]\u001b[A\n","2it [00:09,  4.83s/it]\u001b[A\n","3it [00:14,  4.78s/it]\u001b[A\n","4it [00:18,  4.65s/it]\n","3it [00:54, 18.21s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9973981651996148\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.46s/it]\u001b[A\n","2it [00:08,  4.45s/it]\u001b[A\n","3it [00:13,  4.51s/it]\u001b[A\n","4it [00:18,  4.58s/it]\n","1it [00:18, 18.34s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.40s/it]\u001b[A\n","2it [00:08,  4.42s/it]\u001b[A\n","3it [00:13,  4.49s/it]\u001b[A\n","4it [00:18,  4.55s/it]\n","2it [00:36, 18.29s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.48s/it]\u001b[A\n","2it [00:08,  4.46s/it]\u001b[A\n","3it [00:14,  4.67s/it]\u001b[A\n","4it [00:18,  4.70s/it]\n","3it [00:55, 18.45s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9972967950125868\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.61s/it]\u001b[A\n","2it [00:09,  4.59s/it]\u001b[A\n","3it [00:13,  4.64s/it]\u001b[A\n","4it [00:18,  4.61s/it]\n","1it [00:18, 18.44s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.44s/it]\u001b[A\n","2it [00:08,  4.47s/it]\u001b[A\n","3it [00:13,  4.48s/it]\u001b[A\n","4it [00:18,  4.51s/it]\n","2it [00:36, 18.33s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.47s/it]\u001b[A\n","2it [00:08,  4.45s/it]\u001b[A\n","3it [00:13,  4.44s/it]\u001b[A\n","4it [00:18,  4.51s/it]\n","3it [00:54, 18.19s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9967223639527615\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.32s/it]\u001b[A\n","2it [00:08,  4.35s/it]\u001b[A\n","3it [00:13,  4.40s/it]\u001b[A\n","4it [00:18,  4.51s/it]\n","1it [00:18, 18.04s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.47s/it]\u001b[A\n","2it [00:09,  4.51s/it]\u001b[A\n","3it [00:13,  4.54s/it]\u001b[A\n","4it [00:18,  4.55s/it]\n","2it [00:36, 18.09s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.86s/it]\u001b[A\n","2it [00:09,  4.77s/it]\u001b[A\n","3it [00:13,  4.69s/it]\u001b[A\n","4it [00:18,  4.58s/it]\n","3it [00:54, 18.20s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9973474801061007\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.48s/it]\u001b[A\n","2it [00:09,  4.50s/it]\u001b[A\n","3it [00:13,  4.42s/it]\u001b[A\n","4it [00:18,  4.68s/it]\n","1it [00:18, 18.74s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.52s/it]\u001b[A\n","2it [00:09,  4.52s/it]\u001b[A\n","3it [00:13,  4.45s/it]\u001b[A\n","4it [00:17,  4.49s/it]\n","2it [00:36, 18.51s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.51s/it]\u001b[A\n","2it [00:08,  4.49s/it]\u001b[A\n","3it [00:13,  4.39s/it]\u001b[A\n","4it [00:17,  4.45s/it]\n","3it [00:54, 18.17s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9973305850749294\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.47s/it]\u001b[A\n","2it [00:09,  4.53s/it]\u001b[A\n","3it [00:13,  4.56s/it]\u001b[A\n","4it [00:18,  4.55s/it]\n","1it [00:18, 18.22s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.36s/it]\u001b[A\n","2it [00:09,  4.48s/it]\u001b[A\n","3it [00:13,  4.56s/it]\u001b[A\n","4it [00:18,  4.60s/it]\n","2it [00:36, 18.28s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.54s/it]\u001b[A\n","2it [00:09,  4.67s/it]\u001b[A\n","3it [00:14,  4.65s/it]\u001b[A\n","4it [00:18,  4.67s/it]\n","3it [00:55, 18.45s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.99      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      1.00     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9978881211035834\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:05,  5.05s/it]\u001b[A\n","2it [00:09,  4.83s/it]\u001b[A\n","3it [00:13,  4.69s/it]\u001b[A\n","4it [00:18,  4.62s/it]\n","1it [00:18, 18.49s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.46s/it]\u001b[A\n","2it [00:09,  4.60s/it]\u001b[A\n","3it [00:13,  4.47s/it]\u001b[A\n","4it [00:18,  4.56s/it]\n","2it [00:36, 18.41s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.58s/it]\u001b[A\n","2it [00:08,  4.53s/it]\u001b[A\n","3it [00:13,  4.48s/it]\u001b[A\n","4it [00:18,  4.54s/it]\n","3it [00:54, 18.29s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9972798999814154\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.92s/it]\u001b[A\n","2it [00:09,  4.80s/it]\u001b[A\n","3it [00:13,  4.68s/it]\u001b[A\n","4it [00:18,  4.64s/it]\n","1it [00:18, 18.57s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.40s/it]\u001b[A\n","2it [00:09,  4.46s/it]\u001b[A\n","3it [00:13,  4.50s/it]\u001b[A\n","4it [00:18,  4.54s/it]\n","2it [00:36, 18.45s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.83s/it]\u001b[A\n","2it [00:09,  4.83s/it]\u001b[A\n","3it [00:14,  4.72s/it]\u001b[A\n","4it [00:18,  4.72s/it]\n","3it [00:55, 18.54s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      1.00     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9977698558853841\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.70s/it]\u001b[A\n","2it [00:10,  5.10s/it]\u001b[A\n","3it [00:15,  4.86s/it]\u001b[A\n","4it [00:19,  4.88s/it]\n","1it [00:19, 19.54s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.80s/it]\u001b[A\n","2it [00:09,  4.72s/it]\u001b[A\n","3it [00:13,  4.69s/it]\u001b[A\n","4it [00:18,  4.66s/it]\n","2it [00:38, 19.27s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.73s/it]\u001b[A\n","2it [00:09,  4.64s/it]\u001b[A\n","3it [00:13,  4.63s/it]\u001b[A\n","4it [00:18,  4.54s/it]\n","3it [00:56, 18.79s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.99      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      1.00     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9980739664464681\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.64s/it]\u001b[A\n","2it [00:09,  4.75s/it]\u001b[A\n","3it [00:14,  4.75s/it]\u001b[A\n","4it [00:19,  4.75s/it]\n","1it [00:19, 19.01s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.44s/it]\u001b[A\n","2it [00:09,  4.48s/it]\u001b[A\n","3it [00:13,  4.60s/it]\u001b[A\n","4it [00:18,  4.62s/it]\n","2it [00:37, 18.85s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.69s/it]\u001b[A\n","2it [00:09,  4.58s/it]\u001b[A\n","3it [00:13,  4.64s/it]\u001b[A\n","4it [00:18,  4.63s/it]\n","3it [00:56, 18.67s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.99      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      1.00     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9979557012282688\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.39s/it]\u001b[A\n","2it [00:09,  4.46s/it]\u001b[A\n","3it [00:13,  4.50s/it]\u001b[A\n","4it [00:18,  4.54s/it]\n","1it [00:18, 18.17s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:05,  5.17s/it]\u001b[A\n","2it [00:10,  5.08s/it]\u001b[A\n","3it [00:14,  4.95s/it]\u001b[A\n","4it [00:19,  4.84s/it]\n","2it [00:37, 18.53s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.48s/it]\u001b[A\n","2it [00:08,  4.43s/it]\u001b[A\n","3it [00:13,  4.55s/it]\u001b[A\n","4it [00:18,  4.55s/it]\n","3it [00:55, 18.58s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9973812701684435\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.32s/it]\u001b[A\n","2it [00:09,  4.54s/it]\u001b[A\n","3it [00:13,  4.49s/it]\u001b[A\n","4it [00:18,  4.52s/it]\n","1it [00:18, 18.08s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.79s/it]\u001b[A\n","2it [00:09,  4.71s/it]\u001b[A\n","3it [00:13,  4.65s/it]\u001b[A\n","4it [00:18,  4.58s/it]\n","2it [00:36, 18.15s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.46s/it]\u001b[A\n","2it [00:09,  4.49s/it]\u001b[A\n","3it [00:13,  4.60s/it]\u001b[A\n","4it [00:18,  4.58s/it]\n","3it [00:54, 18.24s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9972461099190728\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.62s/it]\u001b[A\n","2it [00:08,  4.48s/it]\u001b[A\n","3it [00:13,  4.45s/it]\u001b[A\n","4it [00:17,  4.42s/it]\n","1it [00:17, 17.68s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.52s/it]\u001b[A\n","2it [00:09,  4.54s/it]\u001b[A\n","3it [00:13,  4.62s/it]\u001b[A\n","4it [00:18,  4.59s/it]\n","2it [00:36, 17.89s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.50s/it]\u001b[A\n","2it [00:09,  4.55s/it]\u001b[A\n","3it [00:13,  4.56s/it]\u001b[A\n","4it [00:18,  4.56s/it]\n","3it [00:54, 18.11s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9975333254489854\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.43s/it]\u001b[A\n","2it [00:08,  4.43s/it]\u001b[A\n","3it [00:12,  4.30s/it]\u001b[A\n","4it [00:16,  4.15s/it]\n","1it [00:16, 16.61s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.34s/it]\u001b[A\n","2it [00:08,  4.22s/it]\u001b[A\n","3it [00:12,  4.15s/it]\u001b[A\n","4it [00:16,  4.13s/it]\n","2it [00:33, 16.58s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:03,  3.96s/it]\u001b[A\n","2it [00:08,  4.07s/it]\u001b[A\n","3it [00:12,  4.15s/it]\u001b[A\n","4it [00:17,  4.36s/it]\n","3it [00:50, 16.86s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      1.00     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9977022757606988\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.16s/it]\u001b[A\n","2it [00:08,  4.18s/it]\u001b[A\n","3it [00:12,  4.19s/it]\u001b[A\n","4it [00:16,  4.22s/it]\n","1it [00:16, 16.87s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.17s/it]\u001b[A\n","2it [00:08,  4.14s/it]\u001b[A\n","3it [00:12,  4.20s/it]\u001b[A\n","4it [00:16,  4.19s/it]\n","2it [00:33, 16.83s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.26s/it]\u001b[A\n","2it [00:08,  4.33s/it]\u001b[A\n","3it [00:13,  4.31s/it]\u001b[A\n","4it [00:18,  4.51s/it]\n","3it [00:51, 17.22s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9973981651996148\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.20s/it]\u001b[A\n","2it [00:08,  4.20s/it]\u001b[A\n","3it [00:12,  4.15s/it]\u001b[A\n","4it [00:16,  4.17s/it]\n","1it [00:16, 16.69s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.24s/it]\u001b[A\n","2it [00:08,  4.22s/it]\u001b[A\n","3it [00:12,  4.23s/it]\u001b[A\n","4it [00:16,  4.24s/it]\n","2it [00:33, 16.77s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.36s/it]\u001b[A\n","2it [00:08,  4.26s/it]\u001b[A\n","3it [00:12,  4.26s/it]\u001b[A\n","4it [00:16,  4.21s/it]\n","3it [00:50, 16.83s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      1.00     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9977191707918701\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.45s/it]\u001b[A\n","2it [00:08,  4.34s/it]\u001b[A\n","3it [00:12,  4.36s/it]\u001b[A\n","4it [00:17,  4.28s/it]\n","1it [00:17, 17.12s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.31s/it]\u001b[A\n","2it [00:08,  4.30s/it]\u001b[A\n","3it [00:12,  4.32s/it]\u001b[A\n","4it [00:17,  4.34s/it]\n","2it [00:34, 17.20s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.41s/it]\u001b[A\n","2it [00:08,  4.44s/it]\u001b[A\n","3it [00:12,  4.32s/it]\u001b[A\n","4it [00:16,  4.23s/it]\n","3it [00:51, 17.15s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9968744192333034\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.10s/it]\u001b[A\n","2it [00:08,  4.16s/it]\u001b[A\n","3it [00:12,  4.09s/it]\u001b[A\n","4it [00:16,  4.08s/it]\n","1it [00:16, 16.31s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:03,  3.99s/it]\u001b[A\n","2it [00:07,  3.99s/it]\u001b[A\n","3it [00:12,  4.02s/it]\u001b[A\n","4it [00:16,  4.01s/it]\n","2it [00:32, 16.23s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.43s/it]\u001b[A\n","2it [00:08,  4.27s/it]\u001b[A\n","3it [00:12,  4.33s/it]\u001b[A\n","4it [00:16,  4.20s/it]\n","3it [00:49, 16.39s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9974826403554714\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.41s/it]\u001b[A\n","2it [00:08,  4.30s/it]\u001b[A\n","3it [00:12,  4.25s/it]\u001b[A\n","4it [00:16,  4.17s/it]\n","1it [00:16, 16.69s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.23s/it]\u001b[A\n","2it [00:08,  4.23s/it]\u001b[A\n","3it [00:12,  4.24s/it]\u001b[A\n","4it [00:17,  4.27s/it]\n","2it [00:33, 16.81s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:03,  3.91s/it]\u001b[A\n","2it [00:08,  4.01s/it]\u001b[A\n","3it [00:12,  4.01s/it]\u001b[A\n","4it [00:16,  4.05s/it]\n","3it [00:50, 16.67s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9974826403554714\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.20s/it]\u001b[A\n","2it [00:08,  4.27s/it]\u001b[A\n","3it [00:13,  4.42s/it]\u001b[A\n","4it [00:17,  4.41s/it]\n","1it [00:17, 17.64s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.29s/it]\u001b[A\n","2it [00:08,  4.31s/it]\u001b[A\n","3it [00:12,  4.24s/it]\u001b[A\n","4it [00:17,  4.31s/it]\n","2it [00:34, 17.52s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.54s/it]\u001b[A\n","2it [00:08,  4.40s/it]\u001b[A\n","3it [00:13,  4.40s/it]\u001b[A\n","4it [00:17,  4.32s/it]\n","3it [00:52, 17.39s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9975502204801567\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:03,  3.97s/it]\u001b[A\n","2it [00:08,  4.07s/it]\u001b[A\n","3it [00:12,  4.11s/it]\u001b[A\n","4it [00:16,  4.10s/it]\n","1it [00:16, 16.39s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:03,  3.99s/it]\u001b[A\n","2it [00:08,  4.11s/it]\u001b[A\n","3it [00:12,  4.05s/it]\u001b[A\n","4it [00:16,  4.07s/it]\n","2it [00:32, 16.36s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.19s/it]\u001b[A\n","2it [00:08,  4.26s/it]\u001b[A\n","3it [00:12,  4.26s/it]\u001b[A\n","4it [00:17,  4.35s/it]\n","3it [00:50, 16.69s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9968744192333034\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.28s/it]\u001b[A\n","2it [00:08,  4.22s/it]\u001b[A\n","3it [00:13,  4.43s/it]\u001b[A\n","4it [00:17,  4.36s/it]\n","1it [00:17, 17.45s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.14s/it]\u001b[A\n","2it [00:08,  4.12s/it]\u001b[A\n","3it [00:12,  4.18s/it]\u001b[A\n","4it [00:16,  4.15s/it]\n","2it [00:34, 17.20s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.13s/it]\u001b[A\n","2it [00:08,  4.18s/it]\u001b[A\n","3it [00:12,  4.16s/it]\u001b[A\n","4it [00:16,  4.20s/it]\n","3it [00:50, 16.95s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9973305850749294\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.01s/it]\u001b[A\n","2it [00:08,  4.04s/it]\u001b[A\n","3it [00:12,  4.19s/it]\u001b[A\n","4it [00:16,  4.23s/it]\n","1it [00:16, 16.94s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.13s/it]\u001b[A\n","2it [00:08,  4.28s/it]\u001b[A\n","3it [00:12,  4.18s/it]\u001b[A\n","4it [00:17,  4.30s/it]\n","2it [00:34, 17.02s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.09s/it]\u001b[A\n","2it [00:08,  4.10s/it]\u001b[A\n","3it [00:12,  4.09s/it]\u001b[A\n","4it [00:16,  4.07s/it]\n","3it [00:50, 16.80s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9969419993579888\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.32s/it]\u001b[A\n","2it [00:08,  4.23s/it]\u001b[A\n","3it [00:12,  4.21s/it]\u001b[A\n","4it [00:16,  4.24s/it]\n","1it [00:16, 16.97s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.69s/it]\u001b[A\n","2it [00:08,  4.55s/it]\u001b[A\n","3it [00:13,  4.45s/it]\u001b[A\n","4it [00:17,  4.27s/it]\n","2it [00:34, 17.01s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.21s/it]\u001b[A\n","2it [00:08,  4.14s/it]\u001b[A\n","3it [00:12,  4.13s/it]\u001b[A\n","4it [00:16,  4.13s/it]\n","3it [00:50, 16.87s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9974657453243001\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:03,  3.88s/it]\u001b[A\n","2it [00:07,  3.93s/it]\u001b[A\n","3it [00:12,  3.98s/it]\u001b[A\n","4it [00:15,  3.99s/it]\n","1it [00:15, 15.97s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.04s/it]\u001b[A\n","2it [00:08,  4.12s/it]\u001b[A\n","3it [00:12,  4.10s/it]\u001b[A\n","4it [00:16,  4.13s/it]\n","2it [00:32, 16.14s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.99s/it]\u001b[A\n","2it [00:09,  4.86s/it]\u001b[A\n","3it [00:13,  4.56s/it]\u001b[A\n","4it [00:17,  4.40s/it]\n","3it [00:50, 16.71s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9974657453243001\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.16s/it]\u001b[A\n","2it [00:08,  4.16s/it]\u001b[A\n","3it [00:12,  4.26s/it]\u001b[A\n","4it [00:17,  4.27s/it]\n","1it [00:17, 17.07s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:03,  3.80s/it]\u001b[A\n","2it [00:08,  3.95s/it]\u001b[A\n","3it [00:12,  3.96s/it]\u001b[A\n","4it [00:15,  3.99s/it]\n","2it [00:33, 16.74s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.03s/it]\u001b[A\n","2it [00:08,  4.03s/it]\u001b[A\n","3it [00:12,  4.22s/it]\u001b[A\n","4it [00:17,  4.28s/it]\n","3it [00:50, 16.72s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9972123198567301\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.14s/it]\u001b[A\n","2it [00:08,  4.11s/it]\u001b[A\n","3it [00:12,  4.06s/it]\u001b[A\n","4it [00:16,  4.03s/it]\n","1it [00:16, 16.13s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:03,  3.97s/it]\u001b[A\n","2it [00:08,  4.09s/it]\u001b[A\n","3it [00:12,  4.12s/it]\u001b[A\n","4it [00:16,  4.11s/it]\n","2it [00:32, 16.23s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.33s/it]\u001b[A\n","2it [00:08,  4.21s/it]\u001b[A\n","3it [00:12,  4.14s/it]\u001b[A\n","4it [00:16,  4.08s/it]\n","3it [00:48, 16.31s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9969757894203315\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:04,  4.29s/it]\u001b[A\n","2it [00:08,  4.18s/it]\u001b[A\n","3it [00:12,  4.31s/it]\u001b[A\n","4it [00:17,  4.31s/it]\n","1it [00:17, 17.24s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.21s/it]\u001b[A\n","2it [00:08,  4.16s/it]\u001b[A\n","3it [00:12,  4.22s/it]\u001b[A\n","4it [00:16,  4.12s/it]\n","2it [00:33, 17.01s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:04,  4.18s/it]\u001b[A\n","2it [00:08,  4.21s/it]\u001b[A\n","3it [00:12,  4.18s/it]\u001b[A\n","4it [00:16,  4.17s/it]\n","3it [00:50, 16.81s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","0it [00:00, ?it/s]\n","0it [00:00, ?it/s]\u001b[A"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9974995353866428\n"],"name":"stdout"},{"output_type":"stream","text":["\n","1it [00:03,  3.78s/it]\u001b[A\n","2it [00:08,  4.03s/it]\u001b[A\n","3it [00:12,  4.03s/it]\u001b[A\n","4it [00:16,  4.11s/it]\n","1it [00:16, 16.46s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:03,  3.98s/it]\u001b[A\n","2it [00:07,  3.92s/it]\u001b[A\n","3it [00:11,  3.89s/it]\u001b[A\n","4it [00:16,  4.12s/it]\n","2it [00:32, 16.47s/it]\n","0it [00:00, ?it/s]\u001b[A\n","1it [00:03,  3.93s/it]\u001b[A\n","2it [00:08,  4.07s/it]\u001b[A\n","3it [00:12,  4.10s/it]\u001b[A\n","4it [00:16,  4.17s/it]\n","3it [00:49, 16.54s/it]\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:72: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"],"name":"stderr"},{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.99      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      1.00     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n","\n","0.9983780770075521\n","CPU times: user 32min 1s, sys: 20min 52s, total: 52min 53s\n","Wall time: 28min 27s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"70AGgEJ3M2VL","colab":{}},"source":["result = classification_report(Y_test, submission['pred'], target_names=['normal','smishing'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","outputId":"eec8f4dd-2070-4f22-b506-fbcf0f799329","executionInfo":{"status":"ok","timestamp":1588319199810,"user_tz":-540,"elapsed":1172,"user":{"displayName":"‍김동구[학생](정경대학 언론정보학과)","photoUrl":"","userId":"02800889453040610191"}},"id":"MSbxmkNhM2VS","colab":{"base_uri":"https://localhost:8080/","height":175}},"source":["print(result)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","      normal       1.00      1.00      1.00     51205\n","    smishing       1.00      0.98      0.99      7984\n","\n","    accuracy                           1.00     59189\n","   macro avg       1.00      0.99      0.99     59189\n","weighted avg       1.00      1.00      1.00     59189\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab_type":"code","outputId":"36fc0461-4714-4ee0-f3a0-129c5071ea9d","executionInfo":{"status":"ok","timestamp":1588319207346,"user_tz":-540,"elapsed":1096,"user":{"displayName":"‍김동구[학생](정경대학 언론정보학과)","photoUrl":"","userId":"02800889453040610191"}},"id":"YJXNLQV0M2Vj","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["accuracy_score(Y_test, submission['pred'])"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9974319552619575"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"code","metadata":{"colab_type":"code","outputId":"33ac81b1-83b0-408f-8162-041a2bd669b4","executionInfo":{"status":"ok","timestamp":1588319207349,"user_tz":-540,"elapsed":827,"user":{"displayName":"‍김동구[학생](정경대학 언론정보학과)","photoUrl":"","userId":"02800889453040610191"}},"id":"BIdY57bTM2Vr","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["accuracy_score(Y_test, submission['pred'], normalize=False)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["59037"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"colab_type":"code","outputId":"cdcb3005-91bc-4fc6-c8a1-9d5941143d7b","executionInfo":{"status":"ok","timestamp":1588319208626,"user_tz":-540,"elapsed":1695,"user":{"displayName":"‍김동구[학생](정경대학 언론정보학과)","photoUrl":"","userId":"02800889453040610191"}},"id":"e4PwcdZ8M2V1","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len(Y_test)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["59189"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"markdown","metadata":{"id":"SD25pfrhRRmb","colab_type":"text"},"source":["# 모델링 결과 비교"]},{"cell_type":"markdown","metadata":{"id":"_0sC2Q2RRRqA","colab_type":"text"},"source":["## LGBM F-measure"]},{"cell_type":"code","metadata":{"id":"tePG0gBFdjxz","colab_type":"code","colab":{}},"source":["lgbm_results = os.listdir('lgbm_models/submissions/')[:30]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hOgoRO30d-S0","colab_type":"code","colab":{}},"source":["f_list = list()\n","for result in lgbm_results:\n","    submission = pd.read_csv('lgbm_models/submissions/'+result)\n","    result = classification_report(Y_test, submission['pred'], target_names=['normal','smishing'], output_dict=True)\n","    f_list.append(result['smishing']['f1-score'])\n","    f_list.append(result['normal']['f1-score'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qo9ti1Oad_1R","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"c284c4a1-aea0-4f18-d93b-3b8d83c51d2b","executionInfo":{"status":"ok","timestamp":1588921262983,"user_tz":-540,"elapsed":745,"user":{"displayName":"‍김동구[학생](정경대학 언론정보학과)","photoUrl":"","userId":"02800889453040610191"}}},"source":["print(sum(f_list)/60)"],"execution_count":22,"outputs":[{"output_type":"stream","text":["0.9917866352019239\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"5TsCNgwYe_me","colab_type":"text"},"source":["## SVM F-measure"]},{"cell_type":"code","metadata":{"id":"Ss6iHN8ZgyVm","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"X5voDBV6gylj","colab":{}},"source":["svm_results = os.listdir('svm_models/submissions/')[:30]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"99gXuv8Egylt","colab":{}},"source":["f2_list= list()\n","for result in svm_results:\n","    submission = pd.read_csv('svm_models/submissions/'+result)\n","    result = classification_report(Y_test, submission['pred'], target_names=['normal','smishing'], output_dict=True)\n","    f2_list.append(result['smishing']['f1-score'])\n","    f2_list.append(result['normal']['f1-score'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0SEmvVekg6eO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"05ea6ed5-81e3-4da2-c47b-cb81eb5c22b0","executionInfo":{"status":"ok","timestamp":1588921385180,"user_tz":-540,"elapsed":700,"user":{"displayName":"‍김동구[학생](정경대학 언론정보학과)","photoUrl":"","userId":"02800889453040610191"}}},"source":["print(sum(f2_list)/60)"],"execution_count":27,"outputs":[{"output_type":"stream","text":["0.9944500120421813\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"edbiDRn1hwgJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":54},"outputId":"3230557d-9938-4942-8c1c-14bac3048396","executionInfo":{"status":"ok","timestamp":1588912110626,"user_tz":-540,"elapsed":510,"user":{"displayName":"‍김동구[학생](정경대학 언론정보학과)","photoUrl":"","userId":"02800889453040610191"}}},"source":["result"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'              precision    recall  f1-score   support\\n\\n      normal       1.00      1.00      1.00     51205\\n    smishing       1.00      0.98      0.99      7984\\n\\n    accuracy                           1.00     59189\\n   macro avg       1.00      0.99      0.99     59189\\nweighted avg       1.00      1.00      1.00     59189\\n'"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"kpGNFn2biriQ","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}